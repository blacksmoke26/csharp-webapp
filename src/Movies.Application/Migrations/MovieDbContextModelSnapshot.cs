// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Movies.Application.Context;
using Movies.Application.Domain.Metadata;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Movies.Application.Migrations
{
    [DbContext(typeof(MovieDbContext))]
    partial class MovieDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Movies.Application.Models.Genre", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("MovieId")
                        .HasColumnType("bigint")
                        .HasColumnName("movie_id")
                        .HasComment("Movie");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("name")
                        .HasComment("Name");

                    b.HasKey("Id")
                        .HasName("genres_pkey");

                    b.HasIndex("MovieId")
                        .HasDatabaseName("ix_genres_movie_id");

                    b.HasIndex(new[] { "Name", "MovieId" }, "UNQ_movie_name_genre")
                        .IsUnique()
                        .HasDatabaseName("ix_genres_name_movie_id");

                    b.ToTable("genres", (string)null);
                });

            modelBuilder.Entity("Movies.Application.Models.Movie", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasComment("Created");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("character varying(90)")
                        .HasColumnName("slug")
                        .HasComment("Slug");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status")
                        .HasComment("Status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("title")
                        .HasComment("Title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasComment("Updated");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id")
                        .HasComment("User");

                    b.Property<short>("YearOfRelease")
                        .HasColumnType("smallint")
                        .HasColumnName("year_of_release")
                        .HasComment("Year of Release");

                    b.HasKey("Id")
                        .HasName("movies_pkey");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_movies_user_id");

                    b.HasIndex(new[] { "Title" }, "IDX_movies_title")
                        .HasDatabaseName("ix_movies_title");

                    b.HasIndex(new[] { "Title", "YearOfRelease" }, "UNQ_Title_YoR")
                        .IsUnique()
                        .HasDatabaseName("ix_movies_title_year_of_release");

                    b.HasIndex(new[] { "Slug" }, "UNQ_slug")
                        .IsUnique()
                        .HasDatabaseName("ix_movies_slug");

                    b.ToTable("movies", (string)null);
                });

            modelBuilder.Entity("Movies.Application.Models.Rating", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasComment("Created");

                    b.Property<string>("Feedback")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("feedback")
                        .HasComment("Feedback");

                    b.Property<long>("MovieId")
                        .HasColumnType("bigint")
                        .HasColumnName("movie_id")
                        .HasComment("Movie");

                    b.Property<short>("Score")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)1)
                        .HasColumnName("score")
                        .HasComment("Score");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasComment("Updated");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id")
                        .HasComment("User");

                    b.HasKey("Id")
                        .HasName("ratings_pkey");

                    b.HasIndex("MovieId")
                        .HasDatabaseName("ix_ratings_movie_id");

                    b.HasIndex(new[] { "UserId", "MovieId" }, "IDX_ratings_user_id_movie_id")
                        .IsUnique()
                        .HasDatabaseName("ix_ratings_user_id_movie_id");

                    b.ToTable("ratings", (string)null);
                });

            modelBuilder.Entity("Movies.Application.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AuthKey")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("auth_key")
                        .HasComment("Authorization Key");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasComment("Created");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email")
                        .HasComment("Email Address");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("first_name")
                        .HasComment("First name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("last_name")
                        .HasComment("Last name");

                    b.Property<UserMetadata>("Metadata")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata")
                        .HasDefaultValueSql("'{}'::jsonb")
                        .HasComment("Metadata");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("password")
                        .HasComment("Password");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("password_hash")
                        .HasComment("Password Hash");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("role")
                        .HasComment("Role");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status")
                        .HasComment("Status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasComment("Updated");

                    b.HasKey("Id")
                        .HasName("users_pkey");

                    b.HasIndex(new[] { "Metadata" }, "IDX_users_metadata")
                        .HasDatabaseName("ix_users_metadata")
                        .HasAnnotation("Npgsql:StorageParameter:gin_pending_list_limit", "2097151");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex(new[] { "Metadata" }, "IDX_users_metadata"), "gin");

                    b.HasIndex(new[] { "AuthKey" }, "UNQ_users_auth_key")
                        .IsUnique()
                        .HasDatabaseName("ix_users_auth_key");

                    b.HasIndex(new[] { "Email" }, "UNQ_users_email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Movies.Application.Models.Genre", b =>
                {
                    b.HasOne("Movies.Application.Models.Movie", "Movie")
                        .WithMany("Genres")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_genres_movie_id_movies_id");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Movies.Application.Models.Movie", b =>
                {
                    b.HasOne("Movies.Application.Models.User", "User")
                        .WithMany("Movies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_movies_user_id_users_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Movies.Application.Models.Rating", b =>
                {
                    b.HasOne("Movies.Application.Models.Movie", "Movie")
                        .WithMany("Ratings")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ratings_movie_id_movies_id");

                    b.HasOne("Movies.Application.Models.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ratings_user_id_users_id");

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Movies.Application.Models.Movie", b =>
                {
                    b.Navigation("Genres");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("Movies.Application.Models.User", b =>
                {
                    b.Navigation("Movies");

                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
